<?php

namespace City\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    // Fonction du repository Membre pour supprimer tous les membres d'un Groupe.
    public function deleteByGroup(Groupe $groupe)
    {
        $qb = $this->_em->createQueryBuilder()
            ->delete($this->_entityName, 'm')   // $this->_entityName correspond au nom de l'entité gérée par ce repository. Ici, on aurait pu mettre directement « Namespace\Bundle\Entity\Membre ».
            ->where('m.groupe = :groupe')
                ->setParameter('groupe', $groupe);

        return $qb->getQuery()->execute();      // execute() permet d'exécuter la requête sans récupérer son résultat (car pour un DELETE, il n'y a pas de résultat).
    }

    // Fonction du repository Account pour sélectionner tous les « accounts » qui ont un wrap_id compris dans le tableau en argument.
    public function getByWrap(array $list_wrap_ids)
    {
        $qb = $this->createQueryBuilder('a');

        // Notez l'utilisation de l'expr(), utile dans certains cas, cf. la doc.
        $qb ->where($qb->expr()->in('a.wrap_id', $list_wrap_ids));

        return $qb->getQuery()->getResult();
    }

    // Fonction du repository Membre pour compter le nombre total de membres.
    public function getCount()
    {
        return $this
            ->createQueryBuilder('m')
            ->select('COUNT(m)')       // Le createQueryBuilder() définit déjà un SELECT, mais on le remplace avec le nôtre.
            ->getQuery()
            ->getSingleScalarResult(); // getSingleScalarResult() permet de récupérer directement le COUNT.
                                       // Single = on n'attend qu'une seule ligne de résultat
                                       // Scalar = cette unique ligne n'a qu'une seule colonne, on récupère directement sa valeur
    }
}