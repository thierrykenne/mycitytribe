<!DOCTYPE html>
<html>
	<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{% block title %}MycityTribe{% endblock %}</title>
    {% block head_style -%}
        {% stylesheets filter='?cssembed,?yui_css'
           '@IsdevTwitterBootstrapBundle/Resources/public/bootstrap/css/bootstrap.css'
           '@IsdevTwitterBootstrapBundle/Resources/public/css/custom.css'
        %}<link href="{{ asset_url }}" type="text/css" rel="stylesheet" media="screen" />
        <link rel="stylesheet" href="{{ asset('css/style.css') }}" type="text/css" media="screen" />
        {% endstylesheets %}
    {% endblock head_style %}
<!-- Gmap -->
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&language=en"></script>
<!-- jQuery -->
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<!-- jQuery UI -->
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.min.js"></script>
<!-- jQuery UI Css -->
<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/base/jquery-ui.css" type="text/css" />
<script language="javascript">
$(document).ready(function() {
	var Gcity=$('input.city').attr('id'); 
	var Gregion=$('input.region').attr('id'); 
	var Gcountry=$('input.country').attr('id');
	var Gstate=$('input.state').attr('id');
	$("#submit").click(function(){
		ans=true;
		if ($('input.city').val()=="" || $('input.region').val()=="" || ('input.country').val()
				|| $('input.state').val())
		{
			$('#error').show();
			ans=false;
		}
		
		if($('input#address').val()=="") {
			$('input#address').css("border-color","red");
			ans=false;
		}
		return ans;
	})
	//Init Geocoder  

	var geocoder = new google.maps.Geocoder();
	
	//Init Map in Paris
	var latlng = new google.maps.LatLng(48.864715,2.352448);
		var options = {
		zoom:5,
		center: latlng,
		mapTypeId: google.maps.MapTypeId.TERRAIN
	};
	var map = new google.maps.Map(document.getElementById("map-canvas"), options);
	//add Polygon
		var points = []; 
	    var regionPolygon = new google.maps.Polygon({
		paths: points,
		strokeColor: "#FF0000",
		strokeOpacity: 0.8,
		strokeWeight: 2,
		fillColor: "#FF0000",
		fillOpacity: 0.35
	  });
	//Add Marker
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
    	draggable:true,
    	animation: google.maps.Animation.DROP,
    });
	
	//Drag Event
	google.maps.event.addListener(marker, 'drag', function() {
		geocoder.geocode({'latLng': marker.getPosition()}, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			if (results[0]) {
				$('#address').val(results[0].formatted_address);
				$('.formatted_address').val(results[0].formatted_address);
				//$('#country').val(marker.getPosition().lng());
			    var elt = results[0].address_components;
			    for(i in elt){
					if(elt[i].types[0] == 'locality')
						document.getElementById(Gcity).value = elt[i].long_name;

					if(elt[i].types[0] == 'administrative_area_level_1')
						document.getElementById(Gstate).value = elt[i].long_name;

					if(elt[i].types[0] == 'administrative_area_level_2')
						document.getElementById(Gregion).value = elt[i].long_name;

					if(elt[i].types[0] == 'administrative_area_level_3')
						document.getElementById(Gsubregion).value = elt[i].long_name;

					if(elt[i].types[0] == 'country')
						document.getElementById(Gcountry).value = elt[i].long_name;
				}
			}
		}
		});
    });
	
	//Autocomplete
	$('input#address').autocomplete({
	source: function(request,response) {
		geocoder.geocode( { 'address': $('input#address').val() }, function(results, status) {
		response($.map(results, function(item) {
		return {
		value: item.formatted_address,
	    latitude: item.geometry.location.lat(),
	    longitude: item.geometry.location.lng(),
	    state: 
		        function (){
				    var elt = item.address_components;
					for(i in elt){
						if(elt[i].types[0] == 'administrative_area_level_1')
							return elt[i].long_name;
	                }

				},

		region: 
		        function (){
				    var elt = item.address_components;
					for(i in elt){
						if(elt[i].types[0] == 'administrative_area_level_2')
							return elt[i].long_name;
	                }

				},

		country: 
		        function (){
				    var elt = item.address_components;
					for(i in elt){
						if(elt[i].types[0] == 'country')
							return elt[i].long_name;
	               }
		       },
		city: 
		        function (){
				    var elt = item.address_components;
					for(i in elt){
						if(elt[i].types[0] == 'locality')
							return elt[i].long_name;
	               }
		       }
		}
		}));
		});
		},
	select: function(event, ui) {
			$('#address').val(ui.item['value']);
			$('.formatted_address').val(ui.item['value']);
			$("input.state").val(ui.item.state);
			$("input.region").val(ui.item.region);
			$("input.country").val(ui.item.country);
			$("input.city").val(ui.item.city);
			var location = new google.maps.LatLng(ui.item.latitude, ui.item.longitude);
			marker.setPosition(location);
			map.setCenter(location);
			
			
			//draw polygon region on the map
			
			$.ajax({ // fonction permettant de faire de l'ajax
				   type: "POST", // methode de transmission des données au fichier php
				   url: "{{path('GeoBundle_polygon_region')}}", // url du fichier php
				   data: "country="+$(".country").val()+"&region="+$(".region").val(), // données à transmettre
				   success: function(msg){ // si l'appel a bien fonctionné
						if(msg==0) // si la connexion en php a fonctionnée
						{
						    //remove polygon on map
							regionPolygon.setPath([]);
							
						}
						else // si la connexion en php n'a pas fonctionnée
						{ 
							regionPolygon.setPath([]);
   							points=[];
							var geomAry = new Array(); 
							geomAry = msg.split('|'); 
							var XY = new Array(); 
     						
							for (var i = 0; i < geomAry.length; i++) 
							{ 
							XY = geomAry[i].split(','); 
							points.push(new google.maps.LatLng(parseFloat(XY[1]),parseFloat(XY[0]))) ;
							} 
							//add polygon on map
							  regionPolygon.setPath(points);
							  regionPolygon.setMap(map);

						} 
							
					}

			  })
		}
	});
	

	});

</script>
	</head>
	
	<body>
{% block body %}
    <div class="container">
	{% block container %}
        {# {% block navbar %}{% include 'IsdevTwitterBootstrapBundle::navbar.html.twig' %}{% endblock navbar %} #}

        <div class="content">
			
			{% block flashes %}
                {% import 'IsdevTwitterBootstrapBundle::flash.html.twig' as flash %}
			    {{ flash.session_msg() }}
			{% endblock flashes %}

            {% block content %}
            <div class="row">

            </div>
            {% endblock content %}
        </div>{# /.content #}

        <footer class="row">
	        {% block footer %}
	        <p align="center"> Copyright &copy; <a href="" target="_blank">MyCityTribe </a> {{ 'now'|date('Y') }}</p>
	        {% endblock footer %}
        </footer>
	{% endblock container %}
    </div>{# /.container #}

{% endblock body %}
	</body>
</html>
