<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CityCitytribeBundleEntityThreadProxy extends \City\CitytribeBundle\Entity\Thread implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getLastCommentAuthor()
    {
        $this->__load();
        return parent::getLastCommentAuthor();
    }

    public function setLastCommentAuthor(\Symfony\Component\Security\Core\User\UserInterface $last_comment_author)
    {
        $this->__load();
        return parent::setLastCommentAuthor($last_comment_author);
    }

    public function getPermalink()
    {
        $this->__load();
        return parent::getPermalink();
    }

    public function setPermalink($permalink)
    {
        $this->__load();
        return parent::setPermalink($permalink);
    }

    public function isCommentable()
    {
        $this->__load();
        return parent::isCommentable();
    }

    public function setIsCommentable($isCommentable)
    {
        $this->__load();
        return parent::setIsCommentable($isCommentable);
    }

    public function getNumComments()
    {
        $this->__load();
        return parent::getNumComments();
    }

    public function setNumComments($numComments)
    {
        $this->__load();
        return parent::setNumComments($numComments);
    }

    public function incrementNumComments($by = 1)
    {
        $this->__load();
        return parent::incrementNumComments($by);
    }

    public function getLastCommentAt()
    {
        $this->__load();
        return parent::getLastCommentAt();
    }

    public function setLastCommentAt($lastCommentAt)
    {
        $this->__load();
        return parent::setLastCommentAt($lastCommentAt);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'permalink', 'isCommentable', 'numComments', 'lastCommentAt', 'id', 'last_comment_author');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}